using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.EntityFrameworkCore;
using IdentityApp.Models;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using IdentityApp.Services;
using Microsoft.AspNetCore.Identity.UI.Services;

namespace IdentityApp
{
    public class Startup
    {
        public Startup(IConfiguration config) => Configuration = config;
       
        private IConfiguration Configuration { get; set; }
        
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddControllersWithViews();
            
            services.AddRazorPages();

            services.AddHttpsRedirection(opts =>
            {
                opts.HttpsPort = 44350;
            });

            services.AddDbContext<ProductDbContext>(opts => {
                opts.UseSqlServer(Configuration["ConnectionStrings:AppDataConnection"]);
            });   

            services.AddDbContext<IdentityDbContext>(opts =>
            {
                opts.UseSqlServer(Configuration["ConnectionStrings:IdentityConnection"], opts => opts.MigrationsAssembly("IdentityApp"));
            });

            services
                .AddDefaultIdentity<IdentityUser>(opts =>        // <---------------dotnet add package Microsoft.Extensions.Identity.Core --version 5.0.0
                {                                                // internally call AddAuthentication(), AddIdentityCore, AddIdentityCookies, AddDefaultUI, AddDefaultTokenProviders
                    opts.Password.RequiredLength = 8;
                    opts.Password.RequireDigit = false;
                    opts.Password.RequireLowercase = false;
                    opts.Password.RequireUppercase = false;
                    opts.Password.RequireNonAlphanumeric = false;
                    opts.SignIn.RequireConfirmedAccount = true;
                })                                                                            
                .AddEntityFrameworkStores<IdentityDbContext>();  // <---------------dotnet add package Microsoft.AspNetCore.Identity.EntityFrameworkCore --version 5.0.0
                                                                 // add IUserStore and/or IRoleStore based on IdentityDbContext
            services
                .AddAuthentication()
                .AddGoogle(opts =>  // <---------------------dotnet add package Microsoft.AspNetCore.Authentication.Google --version 5.0.0
                {
                    /* ClientId and ClientSecret are generated by the following command and <UserSecretsId>xxx</UserSecretsId> is also generated in the csproj
                    dotnet user-secrets init
                    dotnet user-secrets set "Google:ClientId" "<client-id>"
                    dotnet user-secrets set "Google:ClientSecret" "<client-secret>"
                    */
                    opts.ClientId = Configuration["Google:ClientId"];
                    opts.ClientSecret = Configuration["Google:ClientSecret"];
                });

            services.AddScoped<IEmailSender,ConsoleEmailSender>();
        }

        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            app.UseHttpsRedirection();

            app.UseStaticFiles();

            app.UseRouting();

            app.UseAuthentication();

            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapDefaultControllerRoute();
                endpoints.MapRazorPages();
            });
        }
    }
}
